version: '3.8'

services:
  weather-dashboard:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: weather-dashboard-prod
    ports:
      - "8080:8080"
    environment:
      - WEATHERAPI_KEY=${WEATHERAPI_KEY}
      - PORT=8080
      - HOST=0.0.0.0
      - DB_PATH=/app/data/weather.db
      - GIN_MODE=release
    volumes:
      - weather_data:/app/data
      - ./templates:/app/templates:ro
      - ./static:/app/static:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - weather-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp
      - /var/tmp
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.weather-dashboard.rule=Host(`weather.yourdomain.com`)"
      - "traefik.http.services.weather-dashboard.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.weather-dashboard-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.weather-dashboard-headers.headers.customrequestheaders.X-Forwarded-Host=weather.yourdomain.com"

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: weather-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - weather-dashboard
    restart: unless-stopped
    networks:
      - weather-network
    profiles:
      - nginx

volumes:
  weather_data:
    driver: local

networks:
  weather-network:
    driver: bridge 